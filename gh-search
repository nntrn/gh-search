#!/usr/bin/env bash
# shellcheck disable=SC2145

VERSION=1.1.0

TODAY=$(date +%F)
CACHEDIR=$HOME/.cache/gh-search

RED='\e[38;5;31m'
BLUE='\e[38;5;39m'
CYAN='\e[38;5;36m'
GREY='\e[37m'
NORMAL='\e[0m'

DEFAULT_OUTDIR=/tmp/gh-search/$TODAY
DEFAULT_PAGE_LIMIT=1
DEFAULT_PAGE_START=1
DEFAULT_PER_PAGE=25
DEFAULT_EXCLUDE_PRIVATE=0

export GHSEARCH_OUTDIR=${GHSEARCH_OUTDIR:-$DEFAULT_OUTDIR}
export GHSEARCH_PAGE_LIMIT=${GHSEARCH_PAGE_LIMIT:-$DEFAULT_PAGE_LIMIT}
export GHSEARCH_PAGE_START=${GHSEARCH_PAGE_START:-$DEFAULT_PAGE_START}
export GHSEARCH_PER_PAGE=${GHSEARCH_PER_PAGE:-$DEFAULT_PER_PAGE}
export GHSEARCH_EXCLUDE_PRIVATE=${GHSEARCH_EXCLUDE_PRIVATE:-$DEFAULT_EXCLUDE_PRIVATE}
export GHSEARCH_SEARCH_TERM=$GHSEARCH_SEARCH_TERM
export GHSEARCH_FORCE=${GHSEARCH_FORCE:-0}

export GREP_CONTEXT=

mkdir -p $CACHEDIR

JQ_FETCH_URLS='if (.items|length) > 0
then (.items | map([
  (.html_url|gsub("/github.com";"/raw.githubusercontent.com")|gsub("/blob/"; "/")),
  ((.repository.full_name+"/"+.path)|gsub("[\\s\\(\\),]+"; "";"x")),
  (if .repository.private then 1 else 0 end)
  ] | join(","))
| join("\n"))
else ""
end'

_usage() {
  echo -e "
    ${CYAN}gh-search${NORMAL} - search github code

    export GITHUB_TOKEN=..

    gh-search \\
      --search ${GREY}[SEARCH_TERM]${NORMAL} \\
      --language ${GREY}[LANGUAGE]${NORMAL} \\
      --user ${GREY}[USER]${NORMAL} \\
      --org ${GREY}[ORG]${NORMAL} \\
      --repo ${GREY}[REPO]${NORMAL} \\
      --extension ${GREY}[EXT]${NORMAL} \\
      --per-page ${GREY}[NUM]${NORMAL} \\
      --path ${GREY}[PATH]${NORMAL} \\
      --out ${GREY}[DIR]${NORMAL}
  "
  exit 1
}

_chksum() {
  echo "$@" | md5sum | awk '{print $1}'
}

_save() {
  echo -e "Save ${BLUE}$1${NORMAL}\n    to ${GREY}$2${NORMAL}\n"
}

_warnMsg() {
  echo -e "${RED}[WARN]${NORMAL} $@" 3>&2 2>&1 >&3 3>&-
}

_errorMsg() {
  echo -e "${RED}[ERROR]${NORMAL} $@" 3>&2 2>&1 >&3 3>&-
  exit 1
}

_curl() {
  local curl_args
  CHKSUM="$(_chksum "$*")"
  CACHEFILE="${CACHEDIR}/${CHKSUM}"
  curl_args=(-s --create-dirs -o "$CACHEFILE" "$@")

  if [[ ! -f "$CACHEFILE" ]]; then
    curl "${curl_args[@]}"
  fi
  cat $CACHEFILE
}

_purl() {
  CHKSUM="$(_chksum "$*")"
  CACHEFILE="${CACHEDIR}/${CHKSUM}.txt"

  if [[ ! -f "$CACHEFILE" ]]; then
    curl -s --create-dirs -o "$CACHEFILE" "$@"
    echo -en "${CYAN}${NORMAL}" 3>&2 2>&1 >&3 3>&-
  fi
  cat $CACHEFILE
}

_grep() {
  grep --color=always -${GREP_CONTEXT%-*} ${GREP_CONTEXT#*-} "$GHSEARCH_SEARCH_TERM" <(sed 's,^,\t,g' "$1")
  echo
}

_store() {
  local GITHUB_URL="${1:?}"
  OUTPUTPATH="$GHSEARCH_OUTDIR/${2:?}"
  ISPRIVATEREPO=${3:-0}

  if [[ $GHSEARCH_EXCLUDE_PRIVATE -eq 1 && $ISPRIVATEREPO -eq 1 ]]; then
    return 0
  fi

  mkdir -p "${OUTPUTPATH%/*}"
  if [[ $ISPRIVATEREPO -eq 1 ]]; then
    _curl -H "Authorization: Bearer $GITHUB_TOKEN" "${GITHUB_URL}" >"$OUTPUTPATH"
  else
    _purl "${GITHUB_URL}" >"$OUTPUTPATH"
  fi
  if [[ -f "$OUTPUTPATH" && -s "$OUTPUTPATH" ]]; then
    _save "${GITHUB_URL}" "$OUTPUTPATH"
    [[ -n $GREP_CONTEXT ]] && _grep "$OUTPUTPATH"
    return 0
  else
    _warnMsg "An error occured saving $OUTPUTPATH"
    return 1
  fi
}

_fetch() {
  local URL="$1"
  CHKSUM="$(_chksum "$URL")"
  local CACHEFILE="${CACHEDIR}/${CHKSUM}-${TODAY}.json"

  [[ ! -f $CACHEFILE ]] &&
    curl -s --create-dirs -o "$CACHEFILE" -H "Authorization: Bearer $GITHUB_TOKEN" "${URL}"

  IFS=$'\n' _items=($(jq -r "$JQ_FETCH_URLS" $CACHEFILE))

  for i in "${!_items[@]}"; do
    IFS=',' _args=(${_items[$i]})
    _store "${_args[@]}"
  done
  if [[ ${#_items[@]} -eq $GHSEARCH_PER_PAGE ]]; then return 0; else return 1; fi
}

codesearch() {
  local URL="$1"
  [[ -z $GITHUB_TOKEN ]] &&
    _errorMsg 'GITHUB_TOKEN is not set. Export before rerunning'

  [[ -z $GHSEARCH_SEARCH_TERM ]] && ! grep -q filename: <<<"$URL" &&
    _errorMsg "Missing search term. Rerun with '--search <TERM>' or '--filename .bashrc'"

  idx=$GHSEARCH_PAGE_START
  stopidx=$((GHSEARCH_PAGE_START + GHSEARCH_PAGE_LIMIT))

  for ((i = $idx; i <= $stopidx; i++)); do
    _fetch "${URL}&page=${i}"
    [[ $? -ne 0 ]] && break
  done

}

search_box() {
  TEXT="$*"
  SPACES="$(printf ' %.0s' $(seq 1 ${#TEXT}))"
  LINE="$(printf '─%.0s' $(seq 1 ${#TEXT}))"

  echo -e "
┌─ search ${LINE[@]:4:-1}──┐
│  ${SPACES}    │
│  ${TEXT}    │
│  ${SPACES}    │
└──${LINE}────┘
"
}

#------------------------------------------------------------------------------#
#-- RUN
#------------------------------------------------------------------------------#
ARGS=($@)
queryargs=()

for i in "${!ARGS[@]}"; do

  index="${ARGS[$i]}"
  next="${ARGS[$i + 1]}"

  if [[ "$next" == *\ * ]]; then
    next="%22${next// /+}%22"
  fi

  case "${index}" in
  -h | --help) _usage ;;
  -f | --force) GHSEARCH_FORCE=1 ;;
  -l | --limit) GHSEARCH_PAGE_LIMIT="$next" ;;
  -o | --out) GHSEARCH_OUTDIR="$next" ;;
  -p | --page) GHSEARCH_PAGE_START=$next ;;
  -t | --token) GITHUB_TOKEN="$next" ;;
  -s | --search) GHSEARCH_SEARCH_TERM="${next// /+}" ;;
  -E | --exclude-private) GHSEARCH_EXCLUDE_PRIVATE=1 ;;
  -P | --per[_-]page) GHSEARCH_PER_PAGE=$next ;;

  # GREP CONTEXT LINE CONTROL
  -A) GREP_CONTEXT="A-${next}" ;;
  -B) GREP_CONTEXT="B-${next}" ;;
  -C) GREP_CONTEXT="C-${next}" ;;

  # QUERY PARAMETER
  --language) queryargs+=("language:$next") ;;
  --ext*) queryargs+=("extension:$next") ;;
  --filename) queryargs+=("filename:$next") ;;
  --repo) queryargs+=("repo:$next") ;;
  --symbol) queryargs+=("symbol:$next") ;;
  --content) queryargs+=("content:$next") ;;
  --user) queryargs+=("user:$next") ;;
  --org) queryargs+=("org:$next") ;;
  --is) queryargs+=("is:$next") ;;
  --path) queryargs+=("path:$next") ;;
  --size) queryargs+=("size:$next") ;;
  --in) queryargs+=("in:$next") ;;
  --not) queryargs+=("NOT") ;;
  --and) queryargs+=("AND") ;;
  --or) queryargs+=("OR") ;;
  --archived) queryargs+=("is:archived") ;;
  --fork) queryargs+=("is:fork") ;;

  esac
done

BASE_URL="https://api.github.com/search/code?per_page=${GHSEARCH_PER_PAGE}"
QUERY_ARGS="$(printf "%s+" "${queryargs[@]}")"
API_URL="${BASE_URL}&q=${GHSEARCH_SEARCH_TERM%+}+${QUERY_ARGS%+}"

STDOUT_SEARCH_SYNTAX="${GHSEARCH_SEARCH_TERM%+} ${QUERY_ARGS//+/ }"

search_box "$STDOUT_SEARCH_SYNTAX"
codesearch "$API_URL"
